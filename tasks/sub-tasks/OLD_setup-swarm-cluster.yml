---
# - name: create a custom swarm network
#   docker_network:
#     name: docker_gwbridge
#     driver_options:
#       com.docker.network.bridge.enable_icc: "false"
#       com.docker.network.bridge.enable_ip_masquerade: "true"
#       com.docker.network.bridge.name: docker_gwbridge
#     ipam_options:
#       subnet: "{{ docker_swarm_network }}"
#       gateway: "{{ docker_swarm_network | ipaddr('net') | ipaddr('1') | ipaddr('ip') }}"
#   when: docker_swarm_network is defined
#         and
#         docker_swarm_network | ipaddr('net')

- name: check if swarm mode is already enabled
  shell:
    cmd: docker info
  changed_when: false
  register: docker_info

- name: init swarm mode on the first manager
  shell:
    cmd: docker swarm init
      --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
      --advertise-addr {{ docker_swarm_addr }}
  when: "
    docker_info.stdout.find('Swarm: active') == -1
    and
    inventory_hostname == groups[docker_swarm_inventory_manager_group_name][0]
    "

- name: get the worker join-token
  shell:
    cmd: docker swarm join-token --quiet worker
  changed_when: false
  register: docker_worker_token
  delegate_to: "{{ groups[docker_swarm_inventory_manager_group_name][0] }}"
  delegate_facts: true
  when: docker_swarm_inventory_worker_group_name in group_names

- name: get the manager join-token
  shell:
    cmd: docker swarm join-token --quiet manager
  changed_when: false
  register: docker_manager_token
  delegate_to: "{{ groups[docker_swarm_inventory_manager_group_name][0] }}"
  delegate_facts: true
  when: docker_swarm_inventory_manager_group_name in group_names
    and
    inventory_hostname != groups[docker_swarm_inventory_manager_group_name][0]

- name: declare the address of the first swarm manager as a fact
  set_fact:
    docker_manager_address: "{{ docker_swarm_addr }}:{{ docker_swarm_port }}"
  when: inventory_hostname == groups[docker_swarm_inventory_manager_group_name][0]

- name: distribute the fact containing address of the first swarm manager
  set_fact:
    docker_manager_address: "{{ hostvars[groups[docker_swarm_inventory_manager_group_name][0]]['docker_manager_address'] }}"
  when: inventory_hostname != groups[docker_swarm_inventory_manager_group_name][0]

- name: join the pending swarm worker nodes
  shell:
    cmd: docker swarm join
      --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
      --advertise-addr {{ docker_swarm_addr }}
      --token "{{ docker_worker_token.stdout }}"
      {{ docker_manager_address }}
  changed_when: false
  when: "
    docker_info.stdout.find('Swarm: active') == -1
    and
    docker_info.stdout.find('Swarm: pending') == -1
    and
    docker_swarm_inventory_worker_group_name in group_names
    and
    docker_swarm_inventory_manager_group_name not in group_names
    "

- name: join the pending swarm manager nodes
  shell:
    cmd: docker swarm join
      --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
      --advertise-addr {{ docker_swarm_addr }}
      --token "{{ docker_manager_token.stdout }}"
      {{ docker_manager_address }}
  changed_when: false
  when: "
    docker_info.stdout.find('Swarm: active') == -1
    and
    docker_info.stdout.find('Swarm: pending') == -1
    and
    docker_swarm_inventory_manager_group_name in group_names
    and
    inventory_hostname != groups[docker_swarm_inventory_manager_group_name][0]
    "

- name: demote node to worker role
  shell:
    cmd: docker node demote {{ inventory_hostname }}
  delegate_to: "{{ groups[docker_swarm_inventory_manager_group_name][0] }}"
  delegate_facts: true
  when: docker_swarm_inventory_worker_group_name in group_names
    and
    docker_swarm_inventory_manager_group_name not in group_names

- name: promote node to manager role
  shell:
    cmd: docker node promote {{ inventory_hostname }}
  delegate_to: "{{ groups[docker_swarm_inventory_manager_group_name][0] }}"
  delegate_facts: true
  when: docker_swarm_inventory_worker_group_name not in group_names
    and
    docker_swarm_inventory_manager_group_name in group_names
